@model JobConfiguration.Models.FoundTableDetails

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts{

    <script>
        $(document).ready(SetDateFormat());
    </script>

}

<div class="row text-center">
    <h2 style="color: mediumseagreen">Create - @Model.TableName</h2>
</div>

@if (TempData["ErrorMessage"] != null && !String.IsNullOrWhiteSpace(TempData["ErrorMessage"].ToString()))
{
    <div class="alert alert-danger">
        <p>@TempData["ErrorMessageSimple"]</p>
        <p>@TempData["ErrorMessageSimple2"]</p>
        <button data-toggle="collapse" data-target="#ErrorInfo">Click me for more error info</button>
        <div id="ErrorInfo" class="collapse" style="margin-top:10px;">
            <div class="row">
                <div class="col-xs-12">
                    <p>Full Error Message:</p>
                    <p>@TempData["ErrorMessage"]</p>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12">
                    <p>Error Stack Trace:</p>
                    <p>@TempData["ErrorStackTrace"]</p>
                </div>
            </div>
        </div>
    </div>
}

<hr />
@using (Html.BeginForm("Create", "Home", FormMethod.Post))
{
    <div class="row">
        <div class="col-xs-8 col-xs-offset-3 col-sm-10 col-sm-offset-0">
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.Hidden("TableName", (object)ViewBag.TargetTable)
                @Html.Hidden("Schema", (object)ViewBag.tableSchema)
                @{
                    int Counter = 0;
                    String required;

                    foreach (JobConfiguration.Models.ColumnDetails colDetails in Model.TableColumns)
                    {
                        if (!colDetails.IdColumn)
                        {

                <div class="row form-group">
                    @Html.Label(colDetails.ColumnName, htmlAttributes: new { @class = "control-label col-sm-6 text-right" })
                    <div class="col-sm-6">
                        @Html.Hidden(String.Format("PropertiesValues[{0}].key", Counter), (object)colDetails.ColumnName)


                        @if (colDetails.CHARACTER_MAXIMUM_LENGTH == 0 || colDetails.CHARACTER_MAXIMUM_LENGTH == null)
                        {
                            colDetails.CHARACTER_MAXIMUM_LENGTH = 11;
                        }

                        @if (colDetails.CHARACTER_MAXIMUM_LENGTH == -1)
                        {
                            colDetails.CHARACTER_MAXIMUM_LENGTH = 250;
                        }

                        @if (colDetails.ColumnName == "PROGRAMCODE")
                        {
                            @Html.TextBox(String.Format("PropertiesValues[{0}].value", Counter), null, new { @class = "form-control", @rows = 1, @placeholder = "ex: DA99999 or DA99999x", onchange = "PCFormatValidation(this.id)", id = "ProgCodeField", required = true })
                        }
                        else if (colDetails.ColumnName == "CODE")
                        {
                            <div style="padding-left: 0px; min-width:300px;" class="col-sm-5">
                                @Html.TextArea(String.Format("PropertiesValues[{0}].value", Counter), new { @class = "form-control", @rows = 10, @placeholder = "Put your SQL query here", onkeyup = "DisableUnusedField(this.id)", id = "CodeField" })
                            </div>
                            <div style="margin-left: 0px; font-size: 1.6vmin; max-height: 214px; overflow: hidden;" class="alert alert-warning col-sm-3" role="alert">
                                Do not include any line comments (--), multi-line comments (/* */), or trailing semicolons (;) in the Code Field.
                            </div>
                        }
                        else if (colDetails.ColumnName == "STOREDPROCEDURE")
                        {
                            @Html.TextBox(String.Format("PropertiesValues[{0}].value", Counter), null, new { @class = "form-control", @rows = 1, onkeyup = "DisableUnusedField(this.id)", id = "SPField" }) //Add upon approval inside curly bracket: , onchange = "CodeTestReminder(this.id)"
                        }
                        else if (colDetails.ColumnName == "TFSCODE")
                        {
                            colDetails.Values = JobConfiguration.Services.PublicUtilities.getDatas(User.Identity.Name);
                            @Html.DropDownList(String.Format("PropertiesValues[{0}].value", Counter), new SelectList(colDetails.Values), new { @class = "form-control", onclick = "DisableUnusedField(this.id)", id = "TFSField" });
                            /*This hidden field is required otherwise nothing coming after it will be populated in the model when the select field is disabled*/
                            <input id="TFSCodeHidden" type="hidden" name="@String.Format("PropertiesValues[{0}].value", Counter)" value="" />
                        }
                        else if (colDetails.ColumnName == "DELIMITER")
                        {
                            @Html.TextBox(String.Format("PropertiesValues[{0}].value", Counter), null, new { @class = "form-control", @rows = 1, onkeyup = "FieldValidation(this.id)", id = "DelimiterField", onchange = "DisableUnusedField(this.id)" })
                        }
                        else if (colDetails.SetList == true)
                        {
                            if (colDetails.IS_NULLABLE == "NO")
                            {
                                if (colDetails.ColumnName == "OUTPUTFILETYPE")
                                {
                                    @Html.DropDownList(String.Format("PropertiesValues[{0}].value", Counter), new SelectList(colDetails.Values), new { @class = "form-control", @required = "Required", onclick = "DisableUnusedField(this.id)", id = "OutputFileType" });
                                }
                                else if (colDetails.ColumnName == "ZEROEXITCODE")
                                {       
                                    <div style="padding-left: 0px; min-width:300px;" class="col-sm-5">
                                        @Html.DropDownList(String.Format("PropertiesValues[{0}].value", Counter), new SelectList(colDetails.Values), new { @class = "form-control", @required = "Required" })
                                    </div>
                                    <div style="margin-left: 0px; font-size: 1.6vmin;  min-width:300px; max-height: 330px; overflow: hidden;" class="alert alert-warning col-sm-3" role="alert">
                                        ZeroExitCode determines how Mr Data will handle jobs that result in no records: <br />
                                        •	0 - Acceptable that the report returned no records. <br />
                                        •	4 - User might be concerned that there is no data returned, but no IT investigation is necessary. <br />
                                        •	6000 - No records indicates a major or unexpected issue and should be investigated by IT. <br />
                                    </div>
                                }
                                else
                                {
                                    @Html.DropDownList(String.Format("PropertiesValues[{0}].value", Counter), new SelectList(colDetails.Values), new { @class = "form-control", @required = "Required" });
                                }
                            }
                            else
                            {
                                if (colDetails.ColumnName == "OUTPUTFILETYPE")
                                {
                                    @Html.DropDownList(String.Format("PropertiesValues[{0}].value", Counter), new SelectList(colDetails.Values), new { @class = "form-control", onclick = "DisableUnusedField(this.id)", id = "OutputFileType" });
                                }
                                else
                                {
                                    @Html.DropDownList(String.Format("PropertiesValues[{0}].value", Counter), new SelectList(colDetails.Values), new { @class = "form-control" });
                                }

                            }
                        }
                        else if (colDetails.DATA_TYPE == "datetime" || colDetails.DATA_TYPE == "date")
                        {
                            if (colDetails.IS_NULLABLE == "NO")
                            {
                                @Html.Editor(String.Format("PropertiesValues[{0}].value", Counter), new { htmlAttributes = new { @class = "form-control datefield", @maxlength = 10, @placeholder = "mm/dd/yyyy", @required = "Required" } });
                            }
                            else
                            {
                                @Html.Editor(String.Format("PropertiesValues[{0}].value", Counter), new { htmlAttributes = new { @class = "form-control datefield", @maxlength = 10, @placeholder = "mm/dd/yyyy" } });
                            }

                        }
                        else if (colDetails.CHARACTER_MAXIMUM_LENGTH > 500)
                        {
                            if (colDetails.IS_NULLABLE == "NO")
                            {
                                @Html.TextArea(String.Format("PropertiesValues[{0}].value", Counter), null, htmlAttributes: new { @class = "form-control", @rows = 10, @required = "Required", @value = "Enter query here" });
                            }
                            else
                            {
                                @Html.TextArea(String.Format("PropertiesValues[{0}].value", Counter), null, new { @class = "form-control", @rows = 10 });
                            }
                        }
                        else
                        {
                            if (colDetails.IS_NULLABLE == "NO")
                            {
                                @Html.Editor(String.Format("PropertiesValues[{0}].value", Counter), new { htmlAttributes = new { @class = "form-control", @required = "Required", @maxlength = colDetails.CHARACTER_MAXIMUM_LENGTH } });
                            }
                            else
                            {
                                @Html.Editor(String.Format("PropertiesValues[{0}].value", Counter), new { htmlAttributes = new { @class = "form-control", @maxlength = colDetails.CHARACTER_MAXIMUM_LENGTH } });
                            }
                        }
                    </div>
                </div>
                            Counter++;
                                    }
                    }
                }
            </div>
        </div>
    </div>
    <hr />
    <div class="row" role="navigation">
        <div class="col-xs-4 col-xs-offset-1 col-sm-2 col-sm-offset-3 col-lg-1 col-lg-offset-4">
            <a href="javascript:void(0);" onclick="history.go(-1);" class="btn btn-primary btn-block">Back</a>
        </div>
        <div class="form-group">
            <div class="col-xs-4 col-xs-offset-2 col-sm-2 col-lg-1">
                <input type="submit" value="Create" class="btn btn-success btn-block" onclick = "FieldsValidation(this.id)" id = "CreateBtnClick" />
            </div>
        </div>
    </div>

    @Scripts.Render("~/Scripts/Custom/JobConfig.js")
    @Scripts.Render("~/Scripts/Custom/LieutenantCommanderData.js")
}